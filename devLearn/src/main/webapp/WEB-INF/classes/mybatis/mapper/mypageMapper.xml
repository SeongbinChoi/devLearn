<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="my">

	<!-- 커뮤니티 qna 작성글 개수 -->
	<select id="qnaDataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0) 
		FROM communityQna
		<where>
			memberEmail=#{memberEmail} AND depth = 0
			<if test="selected != 2">
				AND selected = #{selected}
			</if>
		</where>
	</select>

	<!-- 커뮤니티 qna 작성글 리스트 -->
	<select id="qnaList" parameterType="map" resultType="com.sp.dev.mypage.myWrite.MyWrite" >
		SELECT * FROM (
			SELECT ROWNUM rnum, tb.* FROM (
				SELECT qnaNum, memberEmail, subject, TO_CHAR(regDate,'YYYY-MM-DD') regDate, depth, replyNum, selected
				FROM communityQna
				<where>
					memberEmail=#{memberEmail} AND depth = 0
					<if test="selected != 2">
						AND selected = #{selected}
					</if>
				</where>
				ORDER BY regDate DESC
			) tb WHERE ROWNUM &lt;= #{end}
		) WHERE rnum &gt;= #{start}
	</select>
	
	<!-- 모집한 스터디 개수  -->
	<select id="studyDataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0) 
		FROM study
		<where>
			memberEmail=#{memberEmail}
			<if test="status != 2">
				AND status = #{status}
			</if>
		</where>
	</select>
	
	<!-- 모집한 스터디 리스트 -->
	<select id="studyList" parameterType="map" resultType="com.sp.dev.mypage.myWrite.MyStudyWrite">
		SELECT * FROM (
			SELECT ROWNUM rnum, tb.* FROM (
				SELECT studyNum, memberEmail, r.regionNum, region, subject, TO_CHAR(regDate,'YYYY-MM-DD') regDate, limit, applied, status
				FROM study s
				JOIN studyRegion r ON s.regionNum = r.regionNum
				<where>
					memberEmail=#{memberEmail}
					<if test="status != 2">
						AND status = #{status}
					</if>
				</where>
				ORDER BY regDate DESC
			) tb WHERE ROWNUM &lt;= #{end}
		) WHERE rnum &gt;= #{start}
	</select>
	
	<!-- 스터디 지원자 리스트 -->
	<select id="studyApplyList" parameterType="Integer" resultType="com.sp.dev.mypage.myWrite.StudyApply">
		SELECT applyNum, studyNum, s.applicantEmail, status, memberName
		FROM studyApply s
		JOIN member m ON m.memberEmail=s.applicantEmail
		WHERE studyNum=#{studyNum}
	</select>
	
	<!-- 스터디 지원자 승인 -->
	<update id="updateApplyStatus" parameterType="Integer">
		UPDATE studyApply SET status= 1 WHERE applyNum=#{applyNum}
	</update>
	
	<!-- 지원자 승인 시 승인완료된 인원 증가 -->
	<update id="updateApplyNum" parameterType="Integer">
		UPDATE study SET applied=applied+1 WHERE studyNum=#{studyNum}
	</update>
	
	<!-- 완료버튼 클릭 시 지원 마감 -->
	<update id="updateStudyStatus" parameterType="Integer">
		UPDATE study SET status=1 WHERE studyNum=#{studyNum}
	</update>
	
	
	<!-- 내가 지원한 스터디 리스트 -->
	<select id="myStudyList" parameterType="map" resultType="com.sp.dev.mypage.myWrite.MyStudyWrite">
		SELECT a.studyNum, applyNum, a.applicantEmail, r.regionNum, region, subject, TO_CHAR(regDate,'YYYY-MM-DD') regDate, limit, applied, s.status, a.status applyStatus
		FROM studyApply a
		JOIN study s ON a.studyNum=s.studyNum
		JOIN studyRegion r ON s.regionNum = r.regionNum
		<where>
			a.applicantEmail=#{memberEmail}
			<if test="status != 2">
				AND s.status = #{status}
			</if>
		</where>
	</select>
	
	<!-- 스터디 지원 취소 -->
	<update id="cancelApply" parameterType="Integer">
		UPDATE studyApply SET status= 2 WHERE applyNum=#{applyNum}
	</update>
	
	
	
	<!-- 지원한 멘토링 개수 -->
	<select id="mentorDataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0) 
		FROM mentoringApply
		<where>
			memberEmail=#{memberEmail}
			<if test="status != 9">
				AND status = #{status}
			</if>
		</where>
	</select>
	
	<!-- 지원한 멘토링 리스트 -->
	<select id="mentorList" parameterType="map" resultType="com.sp.dev.mypage.mentor.ApplyMentor">
		SELECT * FROM (
			SELECT ROWNUM rnum, tb.* FROM (
				SELECT a.mentorNum, mentoringNum, a.memberEmail, mentorSubject, mentoringPrice, mentoringDate,
						status, approveDate, phoneNum, applyMessage, applyDate
				FROM mentoringApply a
				JOIN mentor m ON a.mentorNum = m.mentorNum
				<where>
					a.memberEmail=#{memberEmail}
					<if test="status != 9">
						AND status = #{status}
					</if>
				</where>
				ORDER BY applyDate DESC
			) tb WHERE ROWNUM &lt;= #{end}
		) WHERE rnum &gt;= #{start}
	</select>
	
	<!-- status가 이용완료(1)인 리스트 -->
	<select id="status1" parameterType="map" resultType="com.sp.dev.mypage.mentor.ApplyMentor">
		SELECT a.mentorNum, mentoringNum, a.memberEmail, mentoringDate, status, applyDate
		FROM mentoringApply a
		JOIN mentor m ON a.mentorNum = m.mentorNum
		WHERE a.memberEmail=#{memberEmail} AND status = 1
	</select>
	
	<!-- 상담시간이 지난 데이터는 status 이용완료(3)으로 변경 -->
	<update id="statusUpdate" parameterType="Integer">
		UPDATE mentoringApply SET status=3 
		WHERE mentoringNum=#{mentoringNum}
	</update>
	
	<!-- 멘토링 상세 -->
	<select id="readMentor" parameterType="map" resultType="com.sp.dev.mypage.mentor.ApplyMentor">
		SELECT mentorSubject, mb.memberNickname, mentorContent, mentoringPrice, 
				mentoringDate, status, applyDate
		FROM mentoringApply a
		JOIN mentor m ON a.mentorNum = m.mentorNum
		JOIN member mb ON m.memberEmail = mb.memberEmail
		<where>
			mentoringNum=#{mentoringNum}
		</where>
		ORDER BY applyDate DESC
	</select>
	
	<!-- 멘토링 리뷰 등록 -->
	<insert id="insertMentorReview" parameterType="com.sp.dev.mypage.mentor.ApplyMentor">
		INSERT INTO mentorReview(mentoringNum, mentorRate, mentorReviewContent, mentorNum)
			VALUES(#{mentoringNum}, #{mentorRate}, #{mentorReviewContent}, #{mentorNum})
	</insert>
	
	<!-- 멘토링 리뷰 불러오기 -->
	<select id="readMentorReview" parameterType="Integer" resultType="com.sp.dev.mypage.mentor.ApplyMentor">
		SELECT mentoringNum, mentorRate, mentorReviewContent, mentorNum
		FROM mentorReview
		WHERE mentoringNum=#{mentoringNum}
	</select>
	
	<!-- 멘토링 리뷰 수정 -->
	<update id="updateMentorReview"  parameterType="com.sp.dev.mypage.mentor.ApplyMentor">
		UPDATE mentorReview SET mentorRate=#{mentorRate}, mentorReviewContent=#{mentorReviewContent}
		WHERE mentoringNum=#{mentoringNum}
	</update>
	
	
	<!-- 강의 좋아요 개수 -->
	<select id="likeDataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0) 
		FROM lectureLike
		WHERE memberEmail=#{memberEmail}
	</select>
	
	<!-- 강의 좋아요 리스트 -->
	<select id="likeList" parameterType="map" resultType="com.sp.dev.mypage.like.Like">
		SELECT * FROM (
			SELECT ROWNUM rnum, tb.* FROM (
				SELECT lk.lectureNum, lectureSubject, lecturePrice, l.regDate, m.memberNickname
				FROM lectureLike lk
				JOIN lecture l ON lk.lectureNum = l.lectureNum
				JOIN member m ON l.memberEmail = m.memberEmail
				WHERE lk.memberEmail=#{memberEmail}
				ORDER BY l.regDate DESC
			) tb WHERE ROWNUM &lt;= #{end}
		) WHERE rnum &gt;= #{start}
	</select>
	
	
	<!-- 수강바구니 개수 -->
	<select id="cartDataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0) 
		FROM cart
		WHERE memberEmail=#{memberEmail}
	</select>
	
	<!-- 수강바구니 리스트 -->
	<select id="cartList" parameterType="map" resultType="com.sp.dev.mypage.cart.Cart">
		SELECT c.memberEmail, m1.memberName, 
			c.lectureNum, lectureSubject, m2.memberNickname, lectureDuration, lecturePrice, dcPercent
		FROM cart c
		JOIN lecture l ON c.lectureNum = l.lectureNum
		JOIN member m1 ON c.memberEmail = m1.memberEmail
		JOIN member m2 ON l.memberEmail = m2.memberEmail
		WHERE c.memberEmail=#{memberEmail}
	</select>
	
	<!-- 수강바구니 삭제 -->
	<delete id="deleteCart" parameterType="map">
		DELETE FROM cart 
		WHERE memberEmail=#{memberEmail} AND lectureNum=#{lectureNum}
	</delete>
	
	<!-- 수강바구니 체크된 리스트 -->
	<select id="cartCheckList" parameterType="map" resultType="com.sp.dev.mypage.cart.Cart">
		SELECT NVL(SUM(lecturePrice), 0) totalPrice, NVL(SUM(lecturePrice*dcPercent/100),0) totalDiscount
		FROM cart c
		JOIN lecture l ON c.lectureNum = l.lectureNum
		JOIN member m1 ON c.memberEmail = m1.memberEmail
		JOIN member m2 ON l.memberEmail = m2.memberEmail
		<where>
			c.memberEmail=#{memberEmail}
			<if test="lectureNum != null">
				AND c.lectureNum IN
				<foreach collection="lectureNum" item="chk" open="(" close=")" separator=",">
				 #{chk}
				</foreach>
			</if>
		</where>
	</select>
	
	
	<!-- 프로필 등록하기 -->
	<insert id="insertProfile" parameterType="com.sp.dev.mypage.profile.Profile">
		INSERT INTO memberProfile(memberEmail, saveFileName, intro, businessEmail, phoneNum)
		VALUES(#{memberEmail}, #{saveFileName}, #{intro}, #{businessEmail}, #{phoneNum})
	</insert>
	
</mapper>