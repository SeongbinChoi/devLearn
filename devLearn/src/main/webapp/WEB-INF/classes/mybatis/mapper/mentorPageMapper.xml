<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mentorPage">
	<select id="readMentoring" parameterType="String" resultType="com.sp.dev.mentors.Mentors">
		SELECT mentorNum, memberEmail, categoryNum, mentorSubject, 
			mentorContent, mentorPrice, ableDay, sTime, eTime
		FROM mentor
		WHERE memberEmail = #{memberEmail}
	</select>
	
	<update id="insertMentoring" parameterType="com.sp.dev.mentors.Mentors">
		INSERT INTO mentor(mentorNum, memberEmail, categoryNum, mentorSubject, 
			mentorContent, mentorPrice, ableDay, sTime, eTime)
		VALUES(mentor_seq.NEXTVAL, #{memberEmail}, #{categoryCode}, #{mentorSubject},
			#{mentorContent}, #{mentorPrice}, #{ableDay}, #{sTime}, #{eTime} )
	</update>
	
	<update id="updateMentoring" parameterType="com.sp.dev.mentors.Mentors">
		UPDATE mentor SET categoryNum= #{categoryCode}, mentorSubject = #{mentorSubject}, 
			mentorContent = #{mentorContent}, mentorPrice = #{mentorPrice}, ableDay = #{ableDay},
			sTime = #{sTime}, eTime = #{eTime}
		WHERE memberEmail = #{memberEmail}
	</update>
	
	<select id="listMentoringApply" parameterType="String" resultType="com.sp.dev.mentors.Mentors">
		SELECT mentoringNum, ma.mentorNum, mentoringPrice, mentoringDate, 
    		mentorSubject, status, approveDate, applyDate
		FROM mentoringApply ma
		LEFT OUTER JOIN mentor mt ON mt.mentorNum = ma.mentorNum
		LEFT OUTER JOIN member m ON mt.memberEmail = m.memberEmail
		WHERE m.memberEmail = #{memberEmail} 
		<choose>
			<when test="status == '-1' ">
				
			</when>
			
			<when test="status == '4' ">
				AND status &gt;= #{status} 
			</when>
			<otherwise>
				AND status = #{status}
			</otherwise>
		</choose>
	</select>
	
	<select id="readMentoringApply" parameterType="Integer" resultType="com.sp.dev.mentors.Mentors">
		SELECT mentoringNum, memberName, ma.memberEmail, mentoringPrice, mentoringDate, status, approveDate, phoneNum, applyMessage, applyDate
		FROM mentoringApply ma
		LEFT OUTER JOIN member m ON ma.memberEmail = m.memberEmail
		WHERE mentoringNum = #{mentoringNum}
	</select>
	
	<update id="updateMentoringApply" parameterType="map">
		UPDATE mentoringApply SET status = #{status}, approveDate = SYSDATE
		WHERE mentoringNum = #{mentoringNum}
	</update>
	
	<select id="listMentoring" parameterType="map" resultType="com.sp.dev.mentors.Mentors">
		SELECT DISTINCT TO_DATE(SUBSTR(mentoringDate, 0, 10), 'YYYY-MM-DD')mentoringDate FROM mentoringApply ma
		JOIN mentor mt ON mt.mentorNum = ma.mentorNum
		JOIN member m ON m.memberEmail = mt.memberEmail
		<where>
			m.memberEmail = #{memberEmail}
			AND status = 1
			AND TO_DATE(SUBSTR(mentoringDate, 0, 10),'YYYY-MM-DD') &gt;= TO_DATE(#{sDate}, 'YYYY-MM-DD')
			AND TO_DATE(SUBSTR(mentoringDate, 0, 10),'YYYY-MM-DD') &lt;= TO_DATE(#{eDate}, 'YYYY-MM-DD')
		</where>
	</select>
	
	<select id="listMentoringPlan" parameterType="map" resultType="com.sp.dev.mentors.Mentors">
		SELECT  ma.memberEmail, mentoringNum, mentoringDate, ma.phoneNum, applyMessage
		FROM mentoringApply ma
		LEFT OUTER JOIN mentor mt ON ma.mentorNum = mt.mentorNum
		LEFT OUTER JOIN member m ON mt.memberEmail = m.memberEmail
		WHERE ma.mentoringDate LIKE '${mentoringDate}%'
		AND m.memberEmail = #{memberEmail}
	</select>
	
	<select id="listMentoringDetail" parameterType="Integer" resultType="com.sp.dev.mentors.Mentors">
		select mentorSubject, ma.memberEmail, mentoringPrice, mentoringDate, phoneNum, applyMessage 
		FROM mentoringApply ma
		JOIN mentor mt ON mt.mentorNum = ma.mentorNum
		WHERE mentoringNum = #{mentoringNum}
	</select>
	
	<select id="mentoringRevenueList" parameterType="map" resultType="map">
		WITH T_TEMP AS
	    (
	        SELECT
	            NVL(SUM(DECODE(SUBSTR(mentoringDate, 6,2),'01', mentoringPrice, 0)), 0)AS "1월",
	            NVL(SUM(DECODE(SUBSTR(mentoringDate, 6,2),'02', mentoringPrice, 0)), 0)AS "2월",
	            NVL(SUM(DECODE(SUBSTR(mentoringDate, 6,2),'03', mentoringPrice, 0)), 0)AS "3월",
	            NVL(SUM(DECODE(SUBSTR(mentoringDate, 6,2),'04', mentoringPrice, 0)), 0)AS "4월",
	            NVL(SUM(DECODE(SUBSTR(mentoringDate, 6,2),'05', mentoringPrice, 0)), 0)AS "5월",
	            NVL(SUM(DECODE(SUBSTR(mentoringDate, 6,2),'06', mentoringPrice, 0)), 0)AS "6월",
	            NVL(SUM(DECODE(SUBSTR(mentoringDate, 6,2),'07', mentoringPrice, 0)), 0)AS "7월",
	            NVL(SUM(DECODE(SUBSTR(mentoringDate, 6,2),'08', mentoringPrice, 0)), 0)AS "8월",
	            NVL(SUM(DECODE(SUBSTR(mentoringDate, 6,2),'09', mentoringPrice, 0)), 0)AS "9월",
	            NVL(SUM(DECODE(SUBSTR(mentoringDate, 6,2),'10', mentoringPrice, 0)), 0)AS "10월",
	            NVL(SUM(DECODE(SUBSTR(mentoringDate, 6,2),'11', mentoringPrice, 0)), 0)AS "11월",
	            NVL(SUM(DECODE(SUBSTR(mentoringDate, 6,2),'12', mentoringPrice, 0)), 0)AS "12월"
	        FROM mentoringApply ma
	        JOIN mentor mt ON mt.mentorNum = ma.mentorNum
	        WHERE status IN(1, 3)
	        AND mt.memberEmail = #{memberEmail}
	        AND mentoringDate LIKE '${year}%'
	    )
		SELECT month, value
		FROM T_TEMP
		UNPIVOT( value FOR month IN ("1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"))
	</select>
	
	<select id="mentoringYearList" parameterType="String" resultType="map">
		SELECT DISTINCT SUBSTR(mentoringDate, 0, 4) year 
		FROM mentoringApply ma
		JOIN mentor mt ON mt.mentorNum = ma.mentorNum
		WHERE mt.memberEmail = #{membeEmail}
	</select>
	
	<select id="mentoringDetailList" parameterType="map" resultType="com.sp.dev.mentors.Mentors">
		SELECT mentorSubject, ma.memberEmail, SUBSTR(mentoringDate,0,10) mentoringDate, mentoringPrice FROM mentoringApply ma
		JOIN mentor mt ON mt.mentorNum = ma.mentorNum
		JOIN member m ON m.memberEmail = mt.memberEmail
		WHERE ma.status IN(1, 3)
		AND mentoringDate LIKE '${year}%'
		AND mt.memberEmail = #{memberEmail}
	</select>
	
	<select id="allRevenueCount" parameterType="String" resultType="Integer">
		SELECT NVL(SUM(mentoringPrice), 0) 
		FROM mentoringApply ma
		JOIN mentor m ON m.mentorNum = ma.mentorNum
		WHERE m.memberEmail = #{memberEmail}
		AND STATUS IN (1, 3)
	</select>
	
	<select id="monthRevenueCount" parameterType="map" resultType="Integer">
		SELECT NVL(SUM(mentoringPrice), 0) 
		FROM mentoringApply ma
		JOIN mentor m ON m.mentorNum = ma.mentorNum
		WHERE m.memberEmail = #{memberEmail}
		AND STATUS IN (1, 3)
		AND mentoringDate LIKE '${nowYearMonth}%'
	</select>
</mapper>